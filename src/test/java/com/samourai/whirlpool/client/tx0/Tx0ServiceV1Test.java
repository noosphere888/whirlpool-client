package com.samourai.whirlpool.client.tx0;

import com.samourai.wallet.utxo.BipUtxo;
import com.samourai.wallet.utxo.UtxoDetailImpl;
import com.samourai.whirlpool.client.wallet.beans.Tx0FeeTarget;
import com.samourai.whirlpool.client.whirlpool.beans.Tx0Data;
import java.util.Arrays;
import org.bitcoinj.core.Transaction;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Tx0ServiceV1Test extends AbstractTx0ServiceV1Test {
  private Logger log = LoggerFactory.getLogger(Tx0ServiceV1Test.class);

  public Tx0ServiceV1Test() throws Exception {
    super();
  }

  @BeforeEach
  public void setup() throws Exception {
    super.setup();
  }

  @Test
  public void tx0Preview_scode_noFee() throws Exception {
    UtxoDetailImpl spendFromUtxo =
        new UtxoDetailImpl(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae",
            1,
            500000000,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym",
            null);

    int nbOutputsExpected = 70;
    long premixValue = 1000170;
    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    int feeSatPerByte = 1;
    byte[] feePayload = encodeFeePayload(0, (short) 0, (short) 0);
    long feeValue = 0;
    long feeChange = FEE_VALUE;
    int feeDiscountPercent = 100;
    long changeValue = 429975697;

    Tx0PreviewConfig tx0PreviewConfig =
        new Tx0PreviewConfig(
            Tx0FeeTarget.MIN,
            Tx0FeeTarget.MIN,
            Arrays.asList(new UtxoDetailImpl[] {spendFromUtxo}));
    Tx0Data tx0Data =
        new Tx0Data(
            pool01btc.getPoolId(),
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            "test",
            feePayload,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym");
    Tx0Param tx0Param = new Tx0Param(feeSatPerByte, feeSatPerByte, pool01btc, null);
    Assertions.assertEquals(1000170, tx0Param.getPremixValue());
    Tx0Preview tx0Preview =
        tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(2403, tx0Preview.getTx0MinerFee());
    Assertions.assertEquals(feeValue, tx0Preview.getFeeValue());
    Assertions.assertEquals(feeChange, tx0Preview.getFeeChange());
    Assertions.assertEquals(feeDiscountPercent, tx0Preview.getFeeDiscountPercent());
    Assertions.assertEquals(premixValue, tx0Preview.getPremixValue());
    Assertions.assertEquals(changeValue, tx0Preview.getChangeValue());
    Assertions.assertEquals(nbOutputsExpected, tx0Preview.getNbPremix());
  }

  @Test
  public void tx0Preview_overspend() throws Exception {
    UtxoDetailImpl spendFromUtxo =
        new UtxoDetailImpl(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae",
            1,
            500000000,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym",
            null);

    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    int feeSatPerByte = 1;
    byte[] feePayload = encodeFeePayload(0, (short) 0, (short) 0);
    long feeValue = 0;
    long feeChange = FEE_VALUE;
    int feeDiscountPercent = 100;

    Tx0Data tx0Data =
        new Tx0Data(
            pool01btc.getPoolId(),
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            "test",
            feePayload,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym");
    Tx0PreviewConfig tx0PreviewConfig =
        new Tx0PreviewConfig(
            Tx0FeeTarget.MIN,
            Tx0FeeTarget.MIN,
            Arrays.asList(new UtxoDetailImpl[] {spendFromUtxo}));

    // no overspend
    Tx0Param tx0Param = new Tx0Param(feeSatPerByte, feeSatPerByte, pool01btc, null);
    Assertions.assertEquals(1000170, tx0Param.getPremixValue());
    Tx0Preview tx0Preview =
        tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(1000170, tx0Preview.getPremixValue());

    // overspend too low => min
    tx0Param = new Tx0Param(feeSatPerByte, feeSatPerByte, pool01btc, 1L);
    Assertions.assertEquals(pool01btc.getMustMixBalanceMin(), tx0Param.getPremixValue());
    tx0Preview = tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(pool01btc.getMustMixBalanceMin(), tx0Preview.getPremixValue());

    // overspend too high => max
    tx0Param = new Tx0Param(feeSatPerByte, feeSatPerByte, pool01btc, 999999999L);
    Assertions.assertEquals(pool01btc.getMustMixBalanceCap(), tx0Param.getPremixValue());
    tx0Preview = tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(pool01btc.getMustMixBalanceCap(), tx0Preview.getPremixValue());
  }

  @Test
  public void tx0Preview_feeTx0() throws Exception {
    UtxoDetailImpl spendFromUtxo =
        new UtxoDetailImpl(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae",
            1,
            500000000,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym",
            null);

    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    int feeSatPerByte = 1;
    byte[] feePayload = encodeFeePayload(0, (short) 0, (short) 0);
    long feeValue = 0;
    long feeChange = FEE_VALUE;
    int feeDiscountPercent = 100;

    Tx0Data tx0Data =
        new Tx0Data(
            pool01btc.getPoolId(),
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            "test",
            feePayload,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym");
    Tx0Param tx0Param = new Tx0Param(feeSatPerByte, feeSatPerByte, pool01btc, null);
    Assertions.assertEquals(1000170, tx0Param.getPremixValue());

    int TX0_SIZE = 2403;
    Tx0PreviewConfig tx0PreviewConfig =
        new Tx0PreviewConfig(
            Tx0FeeTarget.MIN,
            Tx0FeeTarget.MIN,
            Arrays.asList(new UtxoDetailImpl[] {spendFromUtxo}));

    // feeTx0
    int feeTx0 = 1;
    tx0Param = new Tx0Param(feeTx0, feeSatPerByte, pool01btc, null);
    Tx0Preview tx0Preview =
        tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(TX0_SIZE * feeTx0, tx0Preview.getTx0MinerFee());

    // feeTx0
    feeTx0 = 5;
    tx0Param = new Tx0Param(feeTx0, feeSatPerByte, pool01btc, null);
    tx0Preview = tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(TX0_SIZE * feeTx0, tx0Preview.getTx0MinerFee());

    // feeTx0
    feeTx0 = 50;
    tx0Param = new Tx0Param(feeTx0, feeSatPerByte, pool01btc, null);
    tx0Preview = tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(TX0_SIZE * feeTx0, tx0Preview.getTx0MinerFee());
  }

  @Test
  public void tx0Preview_feePremix() throws Exception {
    UtxoDetailImpl spendFromUtxo =
        new UtxoDetailImpl(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae",
            1,
            500000000,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym",
            null);

    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    int feeSatPerByte = 1;
    byte[] feePayload = encodeFeePayload(0, (short) 0, (short) 0);
    long feeValue = 0;
    long feeChange = FEE_VALUE;
    int feeDiscountPercent = 100;

    Tx0Data tx0Data =
        new Tx0Data(
            pool01btc.getPoolId(),
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            "test",
            feePayload,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym");
    Tx0Param tx0Param = new Tx0Param(feeSatPerByte, feeSatPerByte, pool01btc, null);
    Assertions.assertEquals(1000170, tx0Param.getPremixValue());

    int TX0_SIZE = 572;
    Tx0PreviewConfig tx0PreviewConfig =
        new Tx0PreviewConfig(
            Tx0FeeTarget.MIN,
            Tx0FeeTarget.MIN,
            Arrays.asList(new UtxoDetailImpl[] {spendFromUtxo}));

    // feePremix
    int feePremix = 1;
    tx0Param = new Tx0Param(feeSatPerByte, feePremix, pool01btc, null);
    Tx0Preview tx0Preview =
        tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(1000170, tx0Preview.getPremixValue());

    // feePremix
    feePremix = 5;
    tx0Param = new Tx0Param(feeSatPerByte, feePremix, pool01btc, null);
    tx0Preview = tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(1000850, tx0Preview.getPremixValue());

    // feePremix
    feePremix = 20;
    tx0Param = new Tx0Param(feeSatPerByte, feePremix, pool01btc, null);
    tx0Preview = tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    check(tx0Preview);
    Assertions.assertEquals(1003400, tx0Preview.getPremixValue());

    // feePremix max
    feePremix = 99999;
    tx0Param = new Tx0Param(feeSatPerByte, feePremix, pool01btc, null);
    tx0Preview = tx0PreviewService.tx0PreviewSingle(tx0PreviewConfig, tx0Data, tx0Param).get();
    Assertions.assertEquals(1009500, tx0Preview.getPremixValue());
  }

  @Test
  public void tx0_5premix_withChange_scode_noFee() throws Exception {
    long spendBalance = 500000263;
    BipUtxo spendFromUtxo =
        newUtxo(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae", 1, spendBalance);
    mockUtxos(spendFromUtxo);

    Tx0Config tx0Config =
        whirlpoolWallet.getTx0Config(
            pool01btc,
            Arrays.asList(new BipUtxo[] {spendFromUtxo}),
            Tx0FeeTarget.BLOCKS_24,
            Tx0FeeTarget.BLOCKS_24);
    tx0Config.setTx0x2Decoy(false);
    int nbOutputsExpected = 10;
    long premixValue = 1000150;
    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    long tx0MinerFee = 264;
    long premixMinerFee = 150;
    long mixMinerFee = premixMinerFee * nbOutputsExpected;
    byte[] feePayload = encodeFeePayload(0, (short) 2, (short) 0);
    long feeValue = 0;
    long feeChange = FEE_VALUE;
    int feeDiscountPercent = 100;
    long changeValue = 489988499;
    Tx0Data tx0Data =
        new Tx0Data(
            pool01btc.getPoolId(),
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            "test",
            feePayload,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym");

    Tx0Preview tx0Preview =
        new Tx0Preview(
            pool01btc,
            tx0Data,
            spendBalance,
            543,
            tx0MinerFee,
            mixMinerFee,
            premixMinerFee,
            1,
            1,
            premixValue,
            changeValue,
            nbOutputsExpected,
            null);

    Tx0 tx0 = tx0(tx0Config, tx0Preview);
    check(tx0);

    assertEquals(tx0Preview, tx0);
    Assertions.assertEquals(tx0MinerFee, tx0Preview.getTx0MinerFee());
    Assertions.assertEquals(premixMinerFee, tx0Preview.getPremixMinerFee());
    Assertions.assertEquals(mixMinerFee, tx0Preview.getMixMinerFee());
    Assertions.assertEquals(feeValue, tx0Preview.getFeeValue());
    Assertions.assertEquals(feeChange, tx0Preview.getFeeChange());
    Assertions.assertEquals(feeDiscountPercent, tx0Preview.getFeeDiscountPercent());
    Assertions.assertEquals(premixValue, tx0Preview.getPremixValue());
    Assertions.assertEquals(changeValue, tx0Preview.getChangeValue());
    Assertions.assertEquals(nbOutputsExpected, tx0Preview.getNbPremix());

    Transaction tx = tx0.getTx();
    Assertions.assertEquals(
        nbOutputsExpected + 3, tx.getOutputs().size()); // opReturn + fee + change

    String tx0Hash = tx.getHashAsString();
    String tx0Hex = txUtil.getTxHex(tx);
    log.info(tx0.getTx().toString());
    Assertions.assertEquals(
        "fe00d9dcf132f64e81fa0d786ad3d590be7868b77ff6c46af89c0dad1c1fd500", tx0Hash);
    Assertions.assertEquals(
        "01000000000101ae24e3f5dbcee7971ae0e5b83fcb1eb67057901f2d371ca494f868b3dc8c58cc0100000000ffffffff0d0000000000000000536a4c504d51fe709cbdb9ad363057318d1898fc2c024da31dca9796e1aa290e7db2c7226f83da6bc62fc79f15a3fe70694c036e350b47817fe80c931d2e7317d46b6017af2427f201bec425e41ae8d89a029d0110270000000000001600141bd05eb7c9cb516fddd8187cecb2e0cb4e21ac87d6420f00000000001600141dffe6e395c95927e4a16e8e6bd6d05604447e4dd6420f00000000001600142540e8d450b7114a8b0b429709508735b4b1bbfbd6420f00000000001600145b1cdb2e6ae13f98034b84957d9e0975ad7e6da5d6420f000000000016001472df8c59071778ec20264e2aeb54dd4024bcee0ad6420f00000000001600147aca3eeaecc2ffefd434c70ed67bd579e629c29dd6420f0000000000160014833e54dd2bdc90a6d92aedbecef1ca9cdb24a4c4d6420f00000000001600148535df3b314d3191037e38c698ddb6bac83ba95ad6420f00000000001600149676ec398c2fe0736d61e09e1136958b4bf40cdad6420f0000000000160014adb93750e1ffcfcefc54c6be67bd3011878a5aa5d6420f0000000000160014ff715cbded0e6205a68a1f66a52ee56d56b44c8193a1341d00000000160014f6a884f18f4d7e78a4167c3e56773c3ae58e01640247304402206b2604f64b1a52a12268b90c8a48f17fb14ec1e9a5eae62b6a56ed60ed9db74802203754e4ba336248011c8e99474f8c13c542b39c66b31b8fabe1ba03e6aed9230c0121032e56be09a66e8ef8bddcd5c79d3958a77ef10c964fd4808907debf285093466100000000",
        tx0Hex);
  }

  /*
  @Test
  public void tx0_maxpremix_withChange() throws Exception {
    String seedWords = "all all all all all all all all all all all all";
    String passphrase = "whirlpool";
    byte[] seed = hdWalletFactory.computeSeedFromWords(seedWords);
    HD_Wallet bip84w = hdWalletFactory.getBIP84(seed, passphrase, params);
    ECKey spendFromKey = address.getECKey();
    UnspentOutput spendFrom =
        newUnspentOutput(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae",
            1,
            900000000,
            address); // large balance

    Bip84Wallet depositWallet =
        new Bip84Wallet(
            bip84w,
            WhirlpoolAccount.DEPOSIT,
            new MemoryIndexHandler(),
            new MemoryIndexHandler());
    Bip84Wallet premixWallet =
        new Bip84Wallet(
            bip84w,
            WhirlpoolAccount.PREMIX,
            new MemoryIndexHandler(),
            new MemoryIndexHandler());
    Bip84Wallet postmixWallet =
        new Bip84Wallet(
            bip84w,
            WhirlpoolAccount.POSTMIX,
            new MemoryIndexHandler(),
            new MemoryIndexHandler());
    Bip84Wallet badbankWallet =
        new Bip84Wallet(
            bip84w,
            WhirlpoolAccount.BADBANK,
            new MemoryIndexHandler(),
            new MemoryIndexHandler());
    Tx0Config tx0Config = new Tx0Config();
    int nbOutputsExpected = Tx0Service.NB_PREMIX_MAX;
    long premixValue = 1000150;
    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    int feeSatPerByte = 1;
    byte[] feePayload = new byte[] {1, 2};
    long feeValue = 0;
    long feeChange = FEE_VALUE;
    int feeDiscountPercent = 100;
    long changeValue = 299899999;
    Tx0Data tx0Data =
        new Tx0Data(
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            feePayload,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym",
            0);

    Tx0Preview tx0Preview =
        new Tx0Preview(tx0Data, feeSatPerByte, premixValue, changeValue, nbOutputsExpected);
    Tx0 tx0 =
        tx0Service.tx0(
            Arrays.asList(new UnspentOutputWithKey(spendFrom, spendFromKey.getPrivKeyBytes())),
            depositWallet,
            premixWallet,
            postmixWallet,
            badbankWallet,
            tx0Config,
            tx0Preview);

    assertEquals(tx0Preview, tx0);
    Assertions.assertEquals(feeSatPerByte, tx0Preview.getTx0MinerFee());
    Assertions.assertEquals(feeValue, tx0Preview.getFeeValue());
    Assertions.assertEquals(feeChange, tx0Preview.getFeeChange());
    Assertions.assertEquals(feeDiscountPercent, tx0Preview.getFeeDiscountPercent());
    Assertions.assertEquals(premixValue, tx0Preview.getPremixValue());
    Assertions.assertEquals(changeValue, tx0Preview.getChangeValue());
    Assertions.assertEquals(nbOutputsExpected, tx0Preview.getNbPremix());

    Transaction tx = tx0.getTx();
    Assertions.assertEquals(
        nbOutputsExpected + 3, tx.getOutputs().size()); // opReturn + fee + change

    String tx0Hash = tx.getHashAsString();
    String tx0Hex = txUtil.getTxHex(tx);
    log.info(tx0.getTx().toString());
    Assertions.assertEquals(
        "4894aaa78aaf1460098befa81d111b1f2702f71f3134a0365f921d4fc72ffc20", tx0Hash);
    Assertions.assertEquals(
        "",
        tx0Hex);
  }*/

  /*@Test
  public void tx0_1premix_noChange() throws Exception {
    String seedWords = "all all all all all all all all all all all all";
    String passphrase = "whirlpool";
    byte[] seed = hdWalletFactory.computeSeedFromWords(seedWords);
    HD_Wallet bip84w = hdWalletFactory.getBIP84(seed, passphrase, params);

    ECKey spendFromKey = bip84w.getAccount(0).getChain(0).getAddressAt(61).getECKey();
    TransactionOutPoint spendFromOutpoint =
        new TransactionOutPoint(
            params,
            1,
            Sha256Hash.wrap("cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae"),
            Coin.valueOf(1010498)); // exact balance
    Bip84Wallet depositWallet =
        new Bip84Wallet(bip84w, 0, new MemoryIndexHandler(), new MemoryIndexHandler());
    Bip84Wallet premixWallet =
        new Bip84Wallet(
            bip84w, Integer.MAX_VALUE - 2, new MemoryIndexHandler(), new MemoryIndexHandler());
    int nbOutputsPreferred = 5;
    int nbOutputsExpected = 1;
    long premixValue = 1000150;
    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    int feeSatPerByte = 1;
    byte[] feePayload = new byte[] {1, 2};
    Tx0Data tx0Data =
        new Tx0Data(feePaymentCode, feePayload, "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym", 0);

    Tx0 tx0 =
        tx0Service.tx0(
            spendFromKey.getPrivKeyBytes(),
            spendFromOutpoint,
            depositWallet,
            premixWallet,
            feeSatPerByte,
            nbOutputsPreferred,
            premixValue,
            FEE_VALUE,
            tx0Data);

    Transaction tx = tx0.getTx();
    Assertions.assertEquals(
        nbOutputsExpected + 2, tx.getOutputs().size()); // opReturn + fee (no change)

    String tx0Hash = tx.getHashAsString();
    String tx0Hex = txUtil.getTxHex(tx);
    log.info(tx0.getTx().toString());
    Assertions.assertEquals(
        "239f59f6ada2835bf34cd04eea2e81f0bacd924c5483233f25365c05e67ecd53", tx0Hash);
    Assertions.assertEquals(
        "01000000000101ae24e3f5dbcee7971ae0e5b83fcb1eb67057901f2d371ca494f868b3dc8c58cc0100000000ffffffff030000000000000000426a409ae6649a7b1fc8a917f408cbf7b41e27f3a5484650aafdf5167852bd348afa8aa8213dda856188683ab187a902923e7ec3b672a6fbb637a4063c71879f6859171027000000000000160014f6a884f18f4d7e78a4167c3e56773c3ae58e0164d6420f00000000001600141dffe6e395c95927e4a16e8e6bd6d05604447e4d02483045022100815871dad73b7fdb6c8cf5aeec754e23e784170d45d1f1f3206a6a43773a9e87022031105b0e4faa319d46d2c7b9d546f128b19f1d027be11ea60f166d8856f43cef01210349baf197181fe53937d225d0e7bd14d8b5f921813c038a95d7c2648500c119b000000000",
        tx0Hex);
  }*/

  @Test
  public void tx0_1premix_withChange_scode_nofee() throws Exception {
    long spendBalance = 1021660;
    BipUtxo spendFromUtxo =
        newUtxo(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae",
            1,
            spendBalance); // balance with 11000 change
    mockUtxos(spendFromUtxo);

    Tx0Config tx0Config =
        whirlpoolWallet.getTx0Config(
            pool01btc,
            Arrays.asList(new BipUtxo[] {spendFromUtxo}),
            Tx0FeeTarget.BLOCKS_24,
            Tx0FeeTarget.BLOCKS_24);
    tx0Config.setTx0x2Decoy(false);
    int nbOutputsExpected = 1;
    long premixValue = 1000150;
    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    long tx0MinerFee = 264;
    long premixMinerFee = 150;
    long mixMinerFee = premixMinerFee * nbOutputsExpected;
    byte[] feePayload = encodeFeePayload(1, (short) 2, (short) 0);
    long feeValue = 0;
    long feeChange = FEE_VALUE;
    int feeDiscountPercent = 100;
    long changeValue = 11246;

    // SCODE 0% => deposit
    Tx0Data tx0Data =
        new Tx0Data(
            pool01btc.getPoolId(),
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            "test",
            feePayload,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym");

    Tx0Preview tx0Preview =
        new Tx0Preview(
            pool01btc,
            tx0Data,
            spendBalance,
            264,
            tx0MinerFee,
            premixMinerFee,
            mixMinerFee,
            1,
            1,
            premixValue,
            changeValue,
            nbOutputsExpected,
            null);
    Tx0 tx0 = tx0(tx0Config, tx0Preview);

    check(tx0);
    assertEquals(tx0Preview, tx0);
    Assertions.assertEquals(tx0MinerFee, tx0Preview.getTx0MinerFee());
    Assertions.assertEquals(premixMinerFee, tx0Preview.getPremixMinerFee());
    Assertions.assertEquals(mixMinerFee, tx0Preview.getMixMinerFee());
    Assertions.assertEquals(feeValue, tx0Preview.getFeeValue());
    Assertions.assertEquals(feeChange, tx0Preview.getFeeChange());
    Assertions.assertEquals(feeDiscountPercent, tx0Preview.getFeeDiscountPercent());
    Assertions.assertEquals(premixValue, tx0Preview.getPremixValue());
    Assertions.assertEquals(changeValue, tx0Preview.getChangeValue());
    Assertions.assertEquals(nbOutputsExpected, tx0Preview.getNbPremix());

    Transaction tx = tx0.getTx();
    Assertions.assertEquals(
        nbOutputsExpected + 3, tx.getOutputs().size()); // opReturn + fee (no change)

    String tx0Hash = tx.getHashAsString();
    String tx0Hex = txUtil.getTxHex(tx);
    log.info(tx0.getTx().toString());
    Assertions.assertEquals(
        "0b2c4ce9899d5bcd24765cd8530dce772a7f2722e1294a390ac0ead566255e6a", tx0Hash);
    Assertions.assertEquals(
        "01000000000101ae24e3f5dbcee7971ae0e5b83fcb1eb67057901f2d371ca494f868b3dc8c58cc0100000000ffffffff040000000000000000536a4c504d51fe709cbcb9ad363057318d1898fc2c024da31dca9796e1aa290e7db2c7226f83da6bc62fc79f15a3fe70694c036e350b47817fe80c931d2e7317d46b6017af2427f201bec425e41ae8d89a029d0110270000000000001600141bd05eb7c9cb516fddd8187cecb2e0cb4e21ac87ee2b000000000000160014f6a884f18f4d7e78a4167c3e56773c3ae58e0164d6420f00000000001600141dffe6e395c95927e4a16e8e6bd6d05604447e4d02473044022023811f7a8b33d311e88073272e3b4177c804ff5d9a055e19d8f2292db7f76f6d02201568e9cbb8164100ec172fd9986124e15a28c469873cc6e1989af0f3c40058380121032e56be09a66e8ef8bddcd5c79d3958a77ef10c964fd4808907debf285093466100000000",
        tx0Hex);
  }

  @Test
  public void tx0_1premix_withChange_scode_fee() throws Exception {
    long spendBalance = 1021660;
    BipUtxo spendFromUtxo =
        newUtxo(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae",
            1,
            spendBalance); // balance with 11000 change
    mockUtxos(spendFromUtxo);

    Tx0Config tx0Config =
        whirlpoolWallet.getTx0Config(
            pool01btc,
            Arrays.asList(new BipUtxo[] {spendFromUtxo}),
            Tx0FeeTarget.BLOCKS_24,
            Tx0FeeTarget.BLOCKS_24);
    tx0Config.setTx0x2Decoy(false);
    int nbOutputsExpected = 1;
    long premixValue = 1000150;
    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    long tx0MinerFee = 264;
    long premixMinerFee = 150;
    long mixMinerFee = premixMinerFee * nbOutputsExpected;
    byte[] feePayload = encodeFeePayload(0, (short) 2, (short) 0);
    long feeValue = FEE_VALUE / 2;
    long feeChange = 0;
    int feeDiscountPercent = 50;
    long changeValue = 16246;

    // SCODE 50% => samouraiFee
    Tx0Data tx0Data =
        new Tx0Data(
            pool01btc.getPoolId(),
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            "test",
            feePayload,
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym");

    Tx0Preview tx0Preview =
        new Tx0Preview(
            pool01btc,
            tx0Data,
            spendBalance,
            264,
            tx0MinerFee,
            mixMinerFee,
            premixMinerFee,
            1,
            1,
            premixValue,
            changeValue,
            nbOutputsExpected,
            null);
    Tx0 tx0 = tx0(tx0Config, tx0Preview);

    check(tx0);
    assertEquals(tx0Preview, tx0);
    Assertions.assertEquals(tx0MinerFee, tx0Preview.getTx0MinerFee());
    Assertions.assertEquals(premixMinerFee, tx0Preview.getPremixMinerFee());
    Assertions.assertEquals(mixMinerFee, tx0Preview.getMixMinerFee());
    Assertions.assertEquals(feeValue, tx0Preview.getFeeValue());
    Assertions.assertEquals(feeChange, tx0Preview.getFeeChange());
    Assertions.assertEquals(feeDiscountPercent, tx0Preview.getFeeDiscountPercent());
    Assertions.assertEquals(premixValue, tx0Preview.getPremixValue());
    Assertions.assertEquals(changeValue, tx0Preview.getChangeValue());
    Assertions.assertEquals(nbOutputsExpected, tx0Preview.getNbPremix());

    Transaction tx = tx0.getTx();
    Assertions.assertEquals(
        nbOutputsExpected + 3, tx.getOutputs().size()); // opReturn + fee (no change)

    String tx0Hash = tx.getHashAsString();
    String tx0Hex = txUtil.getTxHex(tx);
    log.info(tx0.getTx().toString());
    Assertions.assertEquals(
        "b735c9aea2052bc32eec0bfe2470904f74488a19c33a7b71e56029dc4ace2762", tx0Hash);
    Assertions.assertEquals(
        "01000000000101ae24e3f5dbcee7971ae0e5b83fcb1eb67057901f2d371ca494f868b3dc8c58cc0100000000ffffffff040000000000000000536a4c504d51fe709cbdb9ad363057318d1898fc2c024da31dca9796e1aa290e7db2c7226f83da6bc62fc79f15a3fe70694c036e350b47817fe80c931d2e7317d46b6017af2427f201bec425e41ae8d89a029d0188130000000000001600149747d7abc760e033a19d477d2091582f76b4308b763f000000000000160014f6a884f18f4d7e78a4167c3e56773c3ae58e0164d6420f00000000001600141dffe6e395c95927e4a16e8e6bd6d05604447e4d024830450221009835d3b5fc719195b042b115fa3a1bc3c0a6f7eaf01e2db70a63eb4b6f2b097802205d9757e03967fb345842e608ae17580033ea5e6b7a430ca5b5c6938f226b931b0121032e56be09a66e8ef8bddcd5c79d3958a77ef10c964fd4808907debf285093466100000000",
        tx0Hex);
  }

  @Test
  public void tx0_1premix_withChange_noScode() throws Exception {
    long spendBalance = 1021660;
    BipUtxo spendFromUtxo =
        newUtxo(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae",
            1,
            spendBalance); // balance with 11000 change
    mockUtxos(spendFromUtxo);

    Tx0Config tx0Config =
        whirlpoolWallet.getTx0Config(
            pool01btc,
            Arrays.asList(new BipUtxo[] {spendFromUtxo}),
            Tx0FeeTarget.BLOCKS_24,
            Tx0FeeTarget.BLOCKS_24);
    tx0Config.setTx0x2Decoy(false);
    int nbOutputsExpected = 1;
    long premixValue = 1000150;
    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    long tx0MinerFee = 264;
    long premixMinerFee = 150;
    long mixMinerFee = premixMinerFee * nbOutputsExpected;
    long feeValue = FEE_VALUE;
    long feeChange = 0;
    int feeDiscountPercent = 100;
    long changeValue = 11246;

    // no SCODE => samouraiFee
    Tx0Data tx0Data =
        new Tx0Data(
            pool01btc.getPoolId(),
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            "test",
            encodeFeePayload(0, (short) 0, (short) 0),
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym");

    Tx0Preview tx0Preview =
        new Tx0Preview(
            pool01btc,
            tx0Data,
            spendBalance,
            264,
            tx0MinerFee,
            mixMinerFee,
            premixMinerFee,
            1,
            1,
            premixValue,
            changeValue,
            nbOutputsExpected,
            null);
    Tx0 tx0 = tx0(tx0Config, tx0Preview);

    check(tx0);
    assertEquals(tx0Preview, tx0);
    Assertions.assertEquals(tx0MinerFee, tx0Preview.getTx0MinerFee());
    Assertions.assertEquals(premixMinerFee, tx0Preview.getPremixMinerFee());
    Assertions.assertEquals(mixMinerFee, tx0Preview.getMixMinerFee());
    Assertions.assertEquals(feeValue, tx0Preview.getFeeValue());
    Assertions.assertEquals(feeChange, tx0Preview.getFeeChange());
    Assertions.assertEquals(feeDiscountPercent, tx0Preview.getFeeDiscountPercent());
    Assertions.assertEquals(premixValue, tx0Preview.getPremixValue());
    Assertions.assertEquals(changeValue, tx0Preview.getChangeValue());
    Assertions.assertEquals(nbOutputsExpected, tx0Preview.getNbPremix());

    Transaction tx = tx0.getTx();
    Assertions.assertEquals(
        nbOutputsExpected + 3, tx.getOutputs().size()); // opReturn + fee (no change)

    String tx0Hash = tx.getHashAsString();
    String tx0Hex = txUtil.getTxHex(tx);
    log.info(tx0.getTx().toString());
    Assertions.assertEquals(
        "1986b7b12ab595c9a7e7718c41070dfe0e502c9583b98f0ac47f337f4746b6f3", tx0Hash);
    Assertions.assertEquals(
        "01000000000101ae24e3f5dbcee7971ae0e5b83fcb1eb67057901f2d371ca494f868b3dc8c58cc0100000000ffffffff040000000000000000536a4c504d51fe709cbdb9af363057318d1898fc2c024da31dca9796e1aa290e7db2c7226f83da6bc62fc79f15a3fe70694c036e350b47817fe80c931d2e7317d46b6017af2427f201bec425e41ae8d89a029d0110270000000000001600149747d7abc760e033a19d477d2091582f76b4308bee2b000000000000160014f6a884f18f4d7e78a4167c3e56773c3ae58e0164d6420f00000000001600141dffe6e395c95927e4a16e8e6bd6d05604447e4d02483045022100d5889ef87831a77735ebda28e67376e4a371f5f4fd5f3850da985ea4338208b4022072d4547778f42c615811c5fa801260a3551575ad8885094b3c5b0439d98365010121032e56be09a66e8ef8bddcd5c79d3958a77ef10c964fd4808907debf285093466100000000",
        tx0Hex);
  }

  @Test
  public void tx0_1premix_withChangePostmix_noScode() throws Exception {
    long spendBalance = 1021660;
    BipUtxo spendFromUtxo =
        newUtxo(
            "cc588cdcb368f894a41c372d1f905770b61ecb3fb8e5e01a97e7cedbf5e324ae",
            1,
            spendBalance); // balance with 11000 change
    mockUtxos(spendFromUtxo);

    Tx0Config tx0Config =
        whirlpoolWallet.getTx0Config(
            pool01btc,
            Arrays.asList(new BipUtxo[] {spendFromUtxo}),
            Tx0FeeTarget.BLOCKS_24,
            Tx0FeeTarget.BLOCKS_24);
    tx0Config.setTx0x2Decoy(false);
    tx0Config.setChangeWallet(whirlpoolWallet.getWalletPostmix());
    int nbOutputsExpected = 1;
    long premixValue = 1000150;
    String feePaymentCode =
        "PM8TJXp19gCE6hQzqRi719FGJzF6AreRwvoQKLRnQ7dpgaakakFns22jHUqhtPQWmfevPQRCyfFbdDrKvrfw9oZv5PjaCerQMa3BKkPyUf9yN1CDR3w6";
    long tx0MinerFee = 264;
    long premixMinerFee = 150;
    long mixMinerFee = premixMinerFee * nbOutputsExpected;
    long feeValue = FEE_VALUE;
    long feeChange = 0;
    int feeDiscountPercent = 100;
    long changeValue = 11246;

    // no SCODE => samouraiFee
    Tx0Data tx0Data =
        new Tx0Data(
            pool01btc.getPoolId(),
            feePaymentCode,
            feeValue,
            feeChange,
            feeDiscountPercent,
            "test",
            encodeFeePayload(0, (short) 0, (short) 0),
            "tb1qjara0278vrsr8gvaga7jpy2c9amtgvytr44xym");

    Tx0Preview tx0Preview =
        new Tx0Preview(
            pool01btc,
            tx0Data,
            spendBalance,
            264,
            tx0MinerFee,
            mixMinerFee,
            premixMinerFee,
            1,
            1,
            premixValue,
            changeValue,
            nbOutputsExpected,
            null);
    Tx0 tx0 = tx0(tx0Config, tx0Preview);

    check(tx0);
    assertEquals(tx0Preview, tx0);
    Assertions.assertEquals(tx0MinerFee, tx0Preview.getTx0MinerFee());
    Assertions.assertEquals(premixMinerFee, tx0Preview.getPremixMinerFee());
    Assertions.assertEquals(mixMinerFee, tx0Preview.getMixMinerFee());
    Assertions.assertEquals(feeValue, tx0Preview.getFeeValue());
    Assertions.assertEquals(feeChange, tx0Preview.getFeeChange());
    Assertions.assertEquals(feeDiscountPercent, tx0Preview.getFeeDiscountPercent());
    Assertions.assertEquals(premixValue, tx0Preview.getPremixValue());
    Assertions.assertEquals(changeValue, tx0Preview.getChangeValue());
    Assertions.assertEquals(nbOutputsExpected, tx0Preview.getNbPremix());

    Transaction tx = tx0.getTx();
    Assertions.assertEquals(
        nbOutputsExpected + 3, tx.getOutputs().size()); // opReturn + fee (no change)

    String tx0Hash = tx.getHashAsString();
    String tx0Hex = txUtil.getTxHex(tx);
    log.info(tx0.getTx().toString());

    Assertions.assertEquals(
        "9e24a7dabecb8f8114a30755adb9ff2e9cdc435c41f43056245a4a3fc128f89c", tx0Hash);
    Assertions.assertEquals(
        "01000000000101ae24e3f5dbcee7971ae0e5b83fcb1eb67057901f2d371ca494f868b3dc8c58cc0100000000ffffffff040000000000000000536a4c504d51fe709cbdb9af363057318d1898fc2c024da31dca9796e1aa290e7db2c7226f83da6bc62fc79f15a3fe70694c036e350b47817fe80c931d2e7317d46b6017af2427f201bec425e41ae8d89a029d0110270000000000001600149747d7abc760e033a19d477d2091582f76b4308bee2b000000000000160014d49377882fdc939d951aa51a3c0ad6dd4a152e26d6420f00000000001600141dffe6e395c95927e4a16e8e6bd6d05604447e4d02483045022100d1c7fbd82df635fed5ad1d2e96070ea223723d5d0d1781694039b44d9dfd9a42022062c3f6c8991cfebc5d4568031b031922f2f969adb4ac2454dd7d0400221f01490121032e56be09a66e8ef8bddcd5c79d3958a77ef10c964fd4808907debf285093466100000000",
        tx0Hex);
  }
}
